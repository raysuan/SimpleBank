// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package db

import (
	"context"
)

type Querier interface {
	AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error)
	// -- name: CreateAccount :one
	// INSERT INTO accounts (
	//   owner,
	//   balance,
	//   currency
	// ) VALUES (
	//   $1, $2,$3
	// )
	// RETURNING *;
	// -- name: GetAccount :one
	// SELECT * FROM accounts
	// WHERE id = $1 LIMIT 1;
	// -- name: GetAccountForUpdate :one
	// SELECT * FROM accounts
	// WHERE id = $1 LIMIT 1
	// FOR NO KEY UPDATE;
	// -- name: ListAccounts :many
	// SELECT * FROM accounts
	// ORDER BY id
	// LIMIT $1
	// OFFSET $2;
	// -- name: AddAccountBalance :one
	// UPDATE accounts
	// SET balance = balance + sqlc.arg(amount)
	// WHERE id = sqlc.arg(id)
	// RETURNING *;
	// -- name: DeleteAccount :exec
	// DELETE FROM accounts WHERE id = $1;
	CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error)
	CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error)
	CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error)
	DeleteAccount(ctx context.Context, id int64) error
	GetAccount(ctx context.Context, id int64) (Account, error)
	GetAccountForUpdate(ctx context.Context, id int64) (Account, error)
	GetEntry(ctx context.Context, id int64) (Entry, error)
	GetTransfer(ctx context.Context, id int64) (Transfer, error)
	ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error)
	ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error)
	ListTransfers(ctx context.Context, arg ListTransfersParams) ([]Transfer, error)
	UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error)
}

var _ Querier = (*Queries)(nil)
